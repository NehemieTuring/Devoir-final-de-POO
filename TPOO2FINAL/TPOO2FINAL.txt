Partie 2 : élément d’Implémentation

1. Utilisation du Design Pattern Observer (Faites des recherches à ce sujet)
- Créer un système de notification où les participants sont notifiés lorsqu'un
événement est annulé ou modifié.
- Implémenter EvenementObservable et ParticipantObserver.
2. Gestion des Exceptions Personnalisées
- Créer des exceptions comme CapaciteMaxAtteinteException ou
EvenementDejaExistantException.
3. Sérialisation JSON/XML
- Sauvegarder et charger la liste des événements dans un fichier JSON/XML en
utilisant Jackson ou JAXB.
4. Utilisation de Streams et Lambdas
5. Bonus : Programmation Asynchrone
- Simuler l'envoi de notifications en différé avec CompletableFuture

Partie 3 : Tests et Validation
Écrire des tests unitaires avec JUnit pour vérifier :
- L'inscription/désinscription d'un participant.
- La gestion des exceptions.
- La sérialisation/désérialisation.
============================================================================================================================================
Le Design pattern observer : est concept de la programmation orienté objet selon le quel on notifie aux observateur s qui sont les objet quand un sujet change.
Dans le cas de notre code, les observateurs seront les participant et l'observable sera les évènement. Donc a chasue fois qu'un évènement est annulé ou modifié, on va notifié aux participant ce qu'il en ait. Pour ce faire, on va implémenter les deux methode suivante EvenementObservable et ParticipantObserver.
=============================================================================================================================================
La gestion d'exception personnalisé, est le concept selon le quel on va créer nos propre exception. Dans le cadre de notre devoir, nous allons créer Créer des exceptions comme CapaciteMaxAtteinteException ou EvenementDejaExistantException pour spécifier qu'on ne peut plus ajouter de participant ou qu'un évènement ne peut plus être ajouté puis qu'il existe déjà.
=============================================================================================================================================
La serialisation est un concept selon le quel les données d'un objet sont enregistrés dans un fichier. L aserialisation JSON : ici, les données des différents objets sont stockés dans des fichiers json.Jackson est ue bibliothèque java qui permet de stocker les informationsd'un objet sous forme de fichier json
=============================================================================================================================================

